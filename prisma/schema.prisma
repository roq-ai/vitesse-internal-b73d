generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model candidate {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String      @db.VarChar(255)
  last_name  String      @db.VarChar(255)
  position   String      @db.VarChar(255)
  status     String      @db.VarChar(255)
  user_id    String      @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  user       user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interview  interview[]
}

model feedback {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content      String
  rating       Int
  user_id      String    @db.Uuid
  interview_id String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  interview    interview @relation(fields: [interview_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model interview {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date         DateTime   @db.Timestamp(6)
  location     String     @db.VarChar(255)
  status       String     @db.VarChar(255)
  user_id      String     @db.Uuid
  candidate_id String     @db.Uuid
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  feedback     feedback[]
  candidate    candidate  @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(255)
  description String   @db.VarChar(255)
  status      String   @db.VarChar(255)
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String      @unique @db.VarChar(255)
  firstName   String?     @db.VarChar(255)
  lastName    String?     @db.VarChar(255)
  roq_user_id String      @db.VarChar(255)
  tenant_id   String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  candidate   candidate[]
  feedback    feedback[]
  interview   interview[]
  job         job[]
  team        team[]
}
